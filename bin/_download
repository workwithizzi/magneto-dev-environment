#!/bin/bash
source bin/utils

# Ask for the Magento version - no option passed
if [ -z "$1" ]; then
	echo "‚ùì Which version of Magento do you want to use?"
	echo "   To include sample data, prefix the version with:"
	echo "   with-samples-"
	echo "   Default: $DEFAULT_MAGENTO_VERSION"
	read -r REPLY_VERSION
	MAG_VERSION=${REPLY_VERSION:-$DEFAULT_MAGENTO_VERSION}

# Skip and use default
elif [ "$1" == "-s" ]; then
	MAG_VERSION=$DEFAULT_MAGENTO_VERSION

# Use the passed in version
else
	MAG_VERSION="$1"
fi

# Download Magento
if [ ! -f ~/.docker-magento/magento2-$MAG_VERSION.tar.gz ]; then
		print_doing "Downloading magento2-$MAG_VERSION"
    mkdir -p ~/.docker-magento
    (cd ~/.docker-magento && curl -OL http://pubfiles.nexcess.net/magento/ce-packages/magento2-$MAG_VERSION.tar.gz)
fi

# Fallback download to hypernode if archive doesn't exist on Nexcess (smaller than 1MB)
if [ $(find ~/.docker-magento/magento2-$MAG_VERSION.tar.gz -size -1M) ]; then
    (cd ~/.docker-magento && curl -o magento2-$MAG_VERSION.tar.gz -OL https://www.magento.mirror.hypernode.com/releases/magento-$MAG_VERSION.tar.gz)
fi


# Remove old temp directory if exists
[ -d "$EXTRACTION_DIR" ] && rm -rf "$EXTRACTION_DIR"

# Final fallback. If no archive exists, let's use Composer!
# Extract files to ".tmp/"
if [ $(find ~/.docker-magento/magento2-$MAG_VERSION.tar.gz -size -1M) ]; then
    print_error "Archive not found, or not yet available due to new version release."
    print_doing "Attempting install with Composer..."

    composer create-project --repository=https://repo.magento.com/ --ignore-platform-reqs magento/project-community-edition=$MAG_VERSION "$EXTRACTION_DIR"
else
    echo "Extracting magento2-$MAG_VERSION.tar.gz to ./$CORE_DIR"
    mkdir -p "$EXTRACTION_DIR" && tar xzf ~/.docker-magento/magento2-$MAG_VERSION.tar.gz -o -C $EXTRACTION_DIR
fi

# ::::::::::::::::::::::::::
# Merge files into project directory

print_doing "Merging the downloaded Magento files with ./$CORE_DIR"
[ ! -d "$CORE_DIR" ] && mkdir -p "$CORE_DIR"

# Remove some unneeded things
if [ -z "$2" ] || [ "$2" != "keep_files" ]; then
	EXTRA_FILES=(
		".htaccess.sample"
		"CHANGELOG.md"
		"COPYING.txt"
		"Gruntfile.js.sample"
		"LICENSE.txt"
		"LICENSE_AFL.txt"
		"SECURITY.md"
		"auth.json.sample"
		"grunt-config.json.sample"
		"package.json.sample"
	)

	for file in "${EXTRA_FILES[@]}"
	do
		[ -f "$EXTRACTION_DIR/$file" ] && rm "$EXTRACTION_DIR/$file"
	done

	[ -d "$EXTRACTION_DIR/.git" ] && rm -rf "$EXTRACTION_DIR/.git"
	[ -d "$EXTRACTION_DIR/.github" ] && rm -rf "$EXTRACTION_DIR/.github"
	# [ -d "$EXTRACTION_DIR/vendor" ] && rm -rf "$EXTRACTION_DIR/vendor"
fi

# Merge downloaded files with current without overwriting existing files
rsync --ignore-existing -raz "$EXTRACTION_DIR/" "$CORE_DIR/"

# Remove old temp directory if exists
[ -d "$EXTRACTION_DIR" ] && rm -rf "$EXTRACTION_DIR"

print_success "Files merged"
